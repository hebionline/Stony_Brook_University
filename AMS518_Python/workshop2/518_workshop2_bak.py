# -*- coding: utf-8 -*-
"""
Created on Tue Dec  3 21:03:30 2019

@author: Bin Lu "SBU ID:112-101-275"
"""
import math
import numpy as np
import pandas as pd
from numpy.linalg import inv
from scipy import stats

df = pd.read_csv(r"C:\Users\ohmyg\Desktop\Quantitative Finance\AMS 518\ETFs.csv", usecols=[0,8])

mnData2 = np.array([-0.00821775,-0.048533,0.0338642,0.0212484,-0.00222065,-0.0571812,-0.0620648,0.0392919,-0.025342,0.0420583,-0.0346759,-0.0188309,-0.079554,0.0513521,0.00145143,-0.0948417,-0.0629042,-0.0513277,0.0707332,0.0434987,0.0335336,-0.0125338,0.0463562,0.0552134,0.0396797,0.00903295,0.036135,0.0356446,-0.0424467,-0.00937838,-0.0321213,0.0354592,-0.006992,-0.0426922,-0.00255027,0.0826664,0.0179591,0.0249882,0.00589418,0.00437476,0.0171275,-0.0220621,0.00233068,0.0338736,-0.00487272,0.0092739,0.0446076,0.0117589,-0.0172595,-0.0382111,-0.00143372,-0.0416555,-0.0190644,-0.00659622,0.0372784,-0.0373743,0.0393129,-0.00129198,-0.120881,0.0164337,-0.010097,-0.00363088,-0.0235552,-0.0398339,-0.0341268,-0.014774,-0.0809831,-0.0946169,-0.127078,0.151043,-0.0546463,-0.0203574,0.115836,0.058161,0.0214619,0.0461819,0.043156,0.0433684,-0.0700515,-0.0212956,-0.0352598,0.0598177,0.0244077,-0.0115748,0.111815,-0.0114675,0.0302275,-0.0110563,-0.0144686,0.040111,-0.00808782,-0.0051369,0.0223886,-0.0224858,-0.00780495,0.051166,-0.0518518,-0.0218983,-0.0141245,0.000203233,-0.0238498,0.0443613,-0.0163552,-0.0212665,-0.00248317,-0.0443765,0.0266085,0.00284312,-0.0634875,-0.0250736,0.0246253,0.0819638,0.00422524,-0.0177418,0.0525069,0.0255934,-0.0072876,-0.0960419,0.0165029,0.0147794,0.0389766,-0.0372093,0.0536845,0.00167205,-0.0266895,0.0379272,0.00870743,0.0517171,0.,-0.0710728,0.0417409,0.0166281,0.0560255,-0.00438944,-0.107357,0.0403165,0.0455188,0.0266115,0.063011,0.00581849,0.024856,0.0158941,0.0974688,-0.0344613,-0.0468216,0.0131894,0.0353986,-0.0237354,-0.00165788,-0.0104625,-0.00221271,-0.0641108,-0.0553349,0.0479783,0.0359368,-0.0305367,-0.0176996,-0.0624587,-0.0102191,0.0392345,-0.0399493,-0.0204982,-0.023259,0.10973,0.00758555,0.104762,0.0353388,0.0151165,0.0325972,0.018817,0.0325589,0.0723084,-0.0124841,0.031818,-0.0307717,0.0112553,0.010107,-0.0152907,0.0172757,-0.00887339,-0.00925869,-0.0396345,0.0134077,0.00545069,-0.061191,0.0173184,-0.016588,0.10105,-0.00348571,-0.0000602653,-0.0152276,0.0221278,0.0714693,0.00859176,-0.00287414,-0.00460486,0.0526409,0.012061,-0.00485937,-0.012067,-0.0353413,0.0416301,0.0630326,0.0440753,0.00236373,0.0690495,0.0514475,-0.0142492,0.0490085,0.0140109,-0.0604751,0.0687726,-0.0893107,0.0532842,0.0212498,-0.0286961,0.12378,0.0362583,0.0260477,-0.0115163,0.00601606,0.046802,0.047097,0.0343617,-0.024463,-0.245428,-0.0892126,0.0703294,0.0396363,0.0409667,-0.0339118,0.00938061,0.00317109,0.0423466,-0.00542607,-0.0393648,0.0389604,0.0256331,-0.0190716,0.0145808,0.0687,-0.0293713,0.0205925,0.0488758,0.0345343,-0.00795612,0.0846814,0.0153976,-0.00656588,-0.0254978,0.016406,0.0211907,-0.0712997,0.00850279,0.0239655,-0.0272552,0.088001,-0.00892608,-0.00523685,-0.0990628,-0.0525407,-0.00672075,0.0582068,0.0245246,0.040679,0.0651145,0.0219599,0.000319748,0.0378784,-0.0490775,0.0438823,0.0194582,-0.0193293,0.0117648,-0.0448966,0.105789,-0.0201249,0.00954386,-0.0220737,0.0275108,0.000963493,-0.0175113,0.0386183,-0.0242902,0.00906439,0.00210407,0.029813,0.010057,0.00702128,0.0104291,0.0185247,-0.0257454,0.0224633,0.000754943,-0.00534129,0.0338524,-0.0100381,0.0192073,-0.0129947,0.0100406,0.0319838,-0.0305056,-0.0468259,0.0114647,0.0123209,-0.0271562,0.0310043,0.0369091,-0.0272453,0.0206198,-0.0403061,0.0122241,0.0239877,0.0354387,0.0269624,0.0275766,0.035668,0.0210553,0.0312816,-0.000320289,0.0393144,-0.00499177,0.0402289,0.0172935,0.0320967,0.00690977,0.0078854,0.013342,0.0225962,0.00225417,-0.0468275,0.0186391,0.0527853,0.0257662,0.070809,-0.02174,0.0595106,0.00591009,-0.0435486,0.0567636,0.0569254,0.042535,0.0752427,-0.0591829,0.0517891,-0.0350861,0.0436215,0.0156091,0.010099,0.0680784,0.0487385,0.00903553,-0.0190057,0.0386804,-0.0116833,-0.157586,0.0605263,0.0772334,0.057444,0.0548435,0.0401909,-0.0328151,0.0380606,0.0372419,-0.0252875,0.0530082,-0.0325708,-0.00627373,-0.0289673,0.0606618,0.0188825,0.0562328,-0.0522449,-0.020313,0.0923238,-0.0312799,-0.0221588,0.0236516,-0.0164763,0.0589282,-0.0549663,-0.00496177,-0.0834562,0.00404525,0.0340502,-0.0968311,-0.0663585,0.074007,0.00507728,-0.0253541,-0.0107982,-0.0662556,-0.0852566,0.0179373,0.0724843,0.0075453,-0.0156964,-0.0209849,0.0360801,-0.0633847,-0.00912297,-0.0752143,-0.0822999,0.00486956,-0.116561,0.0829144,0.0555006,-0.0622293,-0.0277975,-0.0171498,0.00832284,0.0779273,0.0496457,0.0112586,0.0160935,0.0177154,-0.0120163,0.0535043,0.00710322,0.049519,0.0171288,0.012135,-0.0164942,-0.0169333,0.012011,0.0178291,-0.0348922,0.00228474,0.00932031,0.013917,0.0378688,0.0319426,-0.0256158,0.0187269,-0.0193028,-0.0203135,0.0295122,-0.000142724,0.0353365,-0.0112855,0.00692499,-0.0179,0.0345812,-0.000952803,0.0251479,0.000453055,0.0110347,0.0120824,-0.0314049,0.0000865928,0.00507299,0.0210511,0.0242694,0.0310218,0.0163326,0.0125369,0.0139611,-0.0220883,0.00993051,0.0423798,0.0320307,-0.0179769,-0.0325045,0.0127815,0.0351683,0.0147136,-0.0450428,-0.00866595,-0.0631139,-0.0353797,-0.00597745,0.046451,0.0106176,-0.0898836,-0.0099083,0.0121168,-0.0951808,-0.185636,-0.0777984,0.00779115,-0.0895499,-0.116457,0.0819527,0.0897722,0.0517206,0.000195808,0.0715219,0.0330093,0.0351001,-0.0199599,0.0557791,0.0176145,-0.0376751,0.0281147,0.0571328,0.0146514,-0.0855316,-0.0553884,0.0665158,-0.0486118,0.0839285,0.0361931,-0.00229288,0.0632565,0.022393,0.0314566,-0.00104786,0.0280969,-0.0135929,-0.0184262,-0.0217084,-0.0584675,-0.0744671,0.102307,-0.00507155,0.00849657,0.04266,0.0397873,0.0308515,-0.0075257,-0.0646993,0.0387927,0.0125189,0.0195706,0.0239471,-0.0199878,0.00284267,0.00704337,0.0491978,0.0109999,0.0353553,0.0179242,0.0205502,-0.0151129,0.0482777,-0.0317983,0.0293156,0.04363,0.0276633,0.0232895,-0.0362314,0.0422134,0.00690825,0.00618164,0.0208122,0.018879,-0.0151947,0.0369636,-0.0156354,0.0229364,0.0242375,-0.00419738,-0.0315328,0.0534389,-0.0175492,0.00848472,0.0104367,-0.0212356,0.0195497,-0.0646247,-0.0267987,0.0797194,0.000504742,-0.0176857,-0.0520676,-0.00413691,0.063905,0.00269576,0.0152131,0.000905733,0.0349904,-0.00121999,-0.00123521,-0.0196168,0.0336035,0.0180371,0.0177263,0.036523,-0.000389273,0.00905013,0.0115098,0.00480223,0.019164,0.000546284,0.019119,0.0219456,0.0276955,0.00978361,0.0546574,-0.0397261,-0.0272525,0.00271509,0.0213782,0.00483075,0.035388,0.0298143,0.00428509,-0.0719293,0.0177018,-0.0962652,0.0757422,0.0292956,0.0177655,0.0385604,-0.0680409,0.0666583,0.0130427])
num_States2 = 2
#input: mTrMat must be a Numpy Type
#mnData = np.array([[0.470716, 0.529284], [0.444199, 0.555801]]) 
#mRetVal = xMarkovChainEquilibrium(mnData2)
def xMarkovChainEquilibrium(mTrMat):
    mnA_T = mTrMat.transpose()
    mnA_Temp = inv(mnA_T + ([0,1], [1,0])).dot([1, 1])
    return mnA_Temp

def xHMMUGRandomInitial(mnData, num_States):
    #num_States = 2
    #Generate a random matrix and unified
    mnA = np.random.random((num_States, num_States))
    def my_func(x):
        return x/sum(x)
    uni_arrayA = np.apply_along_axis(my_func, axis=1, arr=mnA)
    vnIota = xMarkovChainEquilibrium(uni_arrayA)
    Mean_vnIota = np.mean(mnData, axis=0)
    Var_vnIota = np.var(mnData, axis=0)
    
    mnB = 2 * np.random.random((num_States)) - 1
    uni_arrayB = np.apply_along_axis(my_func, axis=0,arr=mnB)
    vnM = uni_arrayB * (Mean_vnIota)
    
    mnC = np.random.uniform(0.1, 0.99, num_States)
    uni_arrayC = np.apply_along_axis(my_func, axis=0,arr=mnC)
    vnS = uni_arrayC * (Var_vnIota)
    vnS[0] = math.sqrt(vnS[0])
    vnS[1] = math.sqrt(vnS[1])
    
    vnIota = np.array(vnIota)
    mnA = np.array(mnA)
    vnM= np.array(vnM)
    vnS = np.array(vnS)
    
    return vnIota, mnA, vnM, vnS

def xHMMUG(vnData, vnInitalIota, mnInitialA, vnInitialMean, vnInitialSdev):
    nTol, iMaxIter = 10e-7, 5
    iT = len(vnData)
    iN = len(mnInitialA)
    vnIota = vnInitalIota
    mnA = mnInitialA
    vnMean = vnInitialMean
    vnSdev = vnInitialSdev
      
    vnData2 = np.tile(vnData,(2,1))
    mnB = np.tile(np.zeros(607), (2,1))
    for i in range(iT):
        mnB[0][i] = stats.norm.pdf(vnData2[0][i], vnMean[0], vnSdev[0])
        mnB[1][i] = stats.norm.pdf(vnData2[1][i], vnMean[1], vnSdev[1])
    mnAlpha = np.zeros([iT, iN])
    vnNu = np.zeros(iT)
    
    mnAlpha[0] = vnIota*(mnB[:,0])
    vnNu[0] = 1/sum(mnAlpha[0])
    mnAlpha[0] = mnAlpha[0] * vnNu[0]
    
    for j in range(1, iT):
        mnAlpha[j] = [mnAlpha[j-1].dot(mnA)]*(mnB[:,j])
        vnNu[j] = 1/sum(mnAlpha[j])
        mnAlpha[j] = mnAlpha[j] * vnNu[j]
    
    vnLogLikelihood = []
    temp = 0
    for j in range(iT):
        temp -= math.log(vnNu[j])
    vnLogLikelihood.append(temp)
    
    #Main Loop
    for k in range(iMaxIter):
    #E-Step
        mnBeta = np.zeros([iT, iN])
        mnBeta[iT-1] = vnNu[iT-1]
        for t in range(iT-1, -1, -1):
            mnBeta[t-1] = mnA.dot(mnBeta[t] * mnB[:,t])*vnNu[t-1]
        mnTemp = mnAlpha * mnBeta
        def my_func(x):
            return x/sum(x)
        mnGamma = np.apply_along_axis(my_func, axis=1,arr=mnTemp)
        
        mnXi = np.zeros([iN, iN])
        for z in range(iT-1):
            r = mnBeta[z+1] * mnB[:,z+1]
            S = np.kron(mnAlpha[z], r)
            T = (mnA * S.reshape(2,2))
            U = T.flatten()
            mnXi += T/sum(U)
    #M-Step
        mnA = np.apply_along_axis(my_func, axis=1,arr=mnXi)
        vnIota = mnGamma[0]
        mnWeights = np.apply_along_axis(my_func, axis=1,arr=mnGamma.transpose())
        vnMean = mnWeights.dot(vnData)
        temp = (vnData - vnMean[0])**2
        temp2 = (vnData - vnMean[1])**2
        temp = mnWeights * temp
        temp2 = mnWeights * temp2
        #temp += temp2
        def my_func2(x):
            return sum(x)
        vnSdev_tmp = np.apply_along_axis(my_func2, axis=1, arr=temp)
        vnSdev_tmp2 = np.apply_along_axis(my_func2, axis=1, arr=temp2)
        vnSdev = np.zeros([2])
        vnSdev[0] = math.sqrt(vnSdev_tmp[0])
        vnSdev[1] = math.sqrt(vnSdev_tmp2[1])
          
        for i in range(iT):
            mnB[0][i] = stats.norm.pdf(vnData2[0][i], vnMean[0], vnSdev[0])
            mnB[1][i] = stats.norm.pdf(vnData2[1][i], vnMean[1], vnSdev[1])
    
        mnAlpha = np.zeros([iT, iN])
        vnNu = np.zeros(iT)
    
        mnAlpha[0] = vnIota*(mnB[:,0])
        vnNu[0] = 1/sum(mnAlpha[0])
        mnAlpha[0] = mnAlpha[0] * vnNu[0]
    
        for j in range(1, iT):
            mnAlpha[j] = [mnAlpha[j-1].dot(mnA)]*(mnB[:,j])
            vnNu[j] = 1/sum(mnAlpha[j])
            mnAlpha[j] = mnAlpha[j] * vnNu[j]
    
        temp = 0
        for j in range(iT):
            temp -= math.log(vnNu[j])
        vnLogLikelihood.append(temp)
        temp = vnLogLikelihood[-1]/vnLogLikelihood[-2]
        if temp <= nTol + 1:
            break
    nBIC = -2 * vnLogLikelihood[-1] + (iN*(iN+2)-1) *  math.log(iT)
    return vnIota, mnA, vnMean, vnSdev, mnGamma, nBIC, vnLogLikelihood
    
#mnInitialA = np.array([[0.632795,0.367205], [0.434164,0.565836]])
#vnInitalIota = np.array([0.541778,0.458222])
#vnInitialMean = np.array([0.00345599,0.0020741])
#vnInitialSdev = np.array([0.0271713,0.0342415])

vnInitalIota, mnInitialA, vnInitialMean, vnInitialSdev = xHMMUGRandomInitial(mnData2, num_States2)
xHMMUG(mnData2, vnInitalIota, mnInitialA, vnInitialMean, vnInitialSdev)
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    